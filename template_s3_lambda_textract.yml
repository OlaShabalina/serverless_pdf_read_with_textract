AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an S3 bucket and a Lambda function triggered by S3 events for PDF text extraction.

Parameters:
  BucketName:
    Type: String
    Description: The name of the S3 bucket.
    Default: my-s3-bucket-for-text-extraction-demo
  LambdaFunctionName:
    Type: String
    Description: The name of the Lambda function.
    Default: my-lambda-function-for-text-extraction-demo

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      # Configure s3 notification to trigger the lambda function from incoming/ prefix
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: incoming/
            Function: !GetAtt LambdaFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
        - PolicyName: s3
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${BucketName}
                - !Sub arn:aws:s3:::${BucketName}/*
        # Permission for lambda to interact with Textract API
        - PolicyName: textract
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:DetectDocumentText
                Resource: "*"

  # Will move code to a separate deployment later
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              s3 = boto3.client('s3')
              textract = boto3.client('textract')

              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']

                  # Call Textract
                  response = textract.detect_document_text(
                      Document={
                          'S3Object': {
                              'Bucket': bucket,
                              'Name': key
                          }
                      }
                  )
                  
                  print(f"Bucket: {bucket}, Key: {key}")

                  # Extract detected text
                  detected_text = []
                  for item in response.get('Blocks', []):
                      if item['BlockType'] == 'LINE':
                          detected_text.append(item['Text'])
                  
                  # Join detected text into a single string
                  text_output = "\n".join(detected_text)

                  # Create a new key for the output text file
                  output_key = f"processed/{key.split('/')[-1].replace('.jpg', '.txt')}"  # Change the extension to .txt

                  # Write the detected text to the S3 bucket
                  s3.put_object(
                      Bucket=bucket,
                      Key=output_key,
                      Body=text_output
                  )

                  print(f"Detected Text written to: {output_key}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Textract processing complete!')
              }
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 7
  
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  
